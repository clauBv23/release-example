name: Release
on:
  pull_request:
    branches:
      - release-*
    types:
      - closed
  workflow_dispatch:
    inputs:
      package:
        type: choice
        description: Which package to release
        options: 
          - "contracts"
          - "configs"

concurrency: ${{ github.workflow }}-${{ github.ref }}
permissions: {} #reset

jobs:
  
  state:
    name: Check state
    permissions:
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: yarn install
      - run: bash scripts/git-user-config.sh
      - id: state
        name: Get state
        uses: actions/github-script@v7
        env:
          TRIGGERING_ACTOR: ${{ github.triggering_actor }}
        with:
          result-encoding: string
          script: await require('./scripts/state.js')({ github, context, core })
    outputs:
      # Job Flags
      start: ${{ steps.state.outputs.start }}
      changesets: ${{ steps.state.outputs.changesets }}
      promote: ${{ steps.state.outputs.promote }}    

  start:
    runs-on: ubuntu-latest
    needs: state
    name: Start Release Candidate
    ## Run this job only if Manually triggered by the user on UI of main branch.
    if: needs.state.outputs.start == 'true'
    permissions:
      contents: write
      actions: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: yarn install
      - run: bash scripts/git-user-config.sh
      - name: Create Release Candidate Branch
        id: start
        run: bash scripts/start.sh
        env:
          PACKAGE: ${{ github.event.inputs.package }}
      - name: Re-run workflow
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = '${{ github.repository }}'.split('/');
            github.rest.actions.createWorkflowDispatch({
              owner: owner,
              repo: repo,
              workflow_id: 'release-cycle.yml',
              ref: '${{ steps.start.outputs.branch }}',
            });
  
  changesets:
    runs-on: ubuntu-latest
    name: Update PR to release
    needs: state
    if: needs.state.outputs.changesets == 'true'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: yarn install
      - run: bash scripts/git-user-config.sh
      - name: Create/Update PR
        id: changesets
        uses: changesets/action@v1
        with:
          version: yarn ignore
          branch: ${{ github.base_ref || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REF_NAME: ${{ github.ref_name }}

  promote:
    runs-on: ubuntu-latest
    name: Promote to final release
    needs: state
    permissions:
      contents: write
      actions: write
    if: needs.state.outputs.promote == 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: yarn install
      - run: bash scripts/git-user-config.sh
      - name: Exit prerelease state
        run: bash scripts/exit-prerelease.sh
      - name: Re-run workflow
        uses: actions/github-script@v7
        with:
          script: |
            const [owner, repo] = '${{ github.repository }}'.split('/');
            github.rest.actions.createWorkflowDispatch({
              owner: owner,
              repo: repo,
              workflow_id: 'release-cycle.yml',
              ref: 'release-configs'
            });
  
  # publish:
  #   runs-on: ubuntu-latest
  #   name: Publish to npm and create a release/tag
  #   if: |
  #     ${{ 
  #       github.head_ref == 'changeset_release/${{ github.base_ref }}' &&
  #       github.event.pull_request.merged == true 
  #     }}$
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 20
  #     - run: yarn install
  #     - run: bash scripts/git-user-config.sh
  #     - run: echo ${{ github.ref_name }}
  #     - name: Create temporary .npmrc
  #       run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
  #     - name: Publish to npm
  #       uses: actions/github-script@v7
  #       env:
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         script: await require('./scripts/publish.js')({ github, context })